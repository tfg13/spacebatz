##############################################################
#                                                            #
#             SPACEBATZ NETWORKS: DOCUMENTATION              #
#                                                            #
##############################################################

Content:

- Features (* = planned)
- Specifications


FEATURES:

    - fast:        datatransfer is UDP-only
    -              * automatic lerp-minimalization on a per-client basis
                   * automatic adaption to environment
    - predictable: during normal operation, a minimum of one packet is transmitted per tick
    - stable:      automatically detects timeouts/lags via heartbeat-signals
    -              * automatic (full) resync on catastrophic packet loss / connection interrupt
    - flexible:    user-commands in seperate classes/objects, (de)registerable at runtime
    - secure:      * built-in support for MAC (message authentication code)
    - reliable:    message delivery is guaranteed
    - misc:        no connection required --> no time required for setting up and connecting sockets etc


SPECIFICATIONS:

UDP_CTS: (udp packets from client to server)
	maximum length: tba
	minimum length: 5 bytes
	header:
		byte 1:
			2 bit netmode: 00 normal (following), rest reserved
			6 bit unsigned clientID
		byte 2 - 3:
			14 bit unsigned individual client_packcounter
		byte 4:
			MAC (to be specified)
	data:
		consists of N concatenated commands. The length of each command is derived from the commandID

		byte 1:
			cmdID: (0x00: noop, 0x01-0x7F: custom/user cmds, 0x80-0xFF: reserved/net_internal
		additional data bytes: (if any)
			structure depends on cmdID	additional data bytes:

UDP_STC: (udp packets from server to clients)
	maximum length: tba
	minumum length: 4 bytes
	header:
		byte 1:
			2 bit netmode: 00 normal (following), rest reserved
			6 bit unsigned server_packcounter (concatenated with following)
		byte 2: +8 bit unsigned server_packcounter, results in 14 bit unsigned server_packcounter
		byte 3:
			MAC (to be specified)
	data:
		consists of N concatenated commands. The length of each command is derived from the commandID

		byte 1:
			cmdID: (0x00: noop, 0x01-0x7F: custom/user cmds, 0x80-0xFF: reserved/net_internal
		additional data bytes: (if any)
			structure depends on cmdID


Connecting to server:
	Client requests connection by sending a special packet to the server. Specs:
		byte 1:
			NETMODE = 01 (noClient)
			NOCLIENT_CMD = 0 (connect)
		byte 2-4:
			unsigned int port. (the port the clients listens for an answer)
		byte 5:
			length of name-string
		byte 6-x:
			nickname, 16-bit chars
	Server answers the request by sending a special packet to the client. Specs:
		byte 1: first 2 bits: netmode = 01 (yes) 10 (refused)
			rest: index of next udp-packet if accepted, otherwise reason for refusal (6 bit unsigned (part1))
			reasons:
			 1 - server full
		byte 2: 8 bit unsigned (concatenated with part from byte 1): next udp-pack index
		byte 3: signed int clientID if accepted, not specified otherwise
		byte 4-7: signed int serverTick - the current server tick, for lerp-timings
		byte 8: signed byte server-tickdelay. Time between two server ticks




Special modes/Packets:
BTB:
    PING:
	byte 1: NETMODE = 10 (realTime)
		RT_MODE = 0 (ping)
			Ping-Packet. CTS is request, STC is answer (PONG)
	byte 2: clientID (CTS only);
CTS:
    DISCONNECT:
    	byte 1: NETMODE = 10 (realTime)
		RT_MODE = 1 (dc)
	byte 2: clientID
STC:
	DISCONNECT:
		byte 1: NETMODE = 01 (Connetion Management)
				rest = 1 (disconnect)
		byte 2: reason:
						0 - normal (client request)
						1 - connection issues
						2 - kicked
